name: Shared PR Ready for Review Check

on:
  workflow_call:
    inputs:
      notification_user:
        description: 'GitHub username to notify when PRs are ready'
        required: false
        type: string
        default: 'bansavage'
      skip_theme_deploy:
        description: 'Whether to skip PRs with "Theme Deploy" in title'
        required: false
        type: boolean
        default: true

permissions:
  issues: write
  pull-requests: write
  contents: read

jobs:
  check-pr-ready:
    runs-on: ubuntu-latest

    steps:
      - name: Check all PRs for readiness for human review
        uses: actions/github-script@v7
        with:
          script: |
            console.log('🔍 Daily check: Looking for PRs ready for human review...');

            const notificationUser = '${{ inputs.notification_user }}';
            const skipThemeDeploy = ${{ inputs.skip_theme_deploy }};

            // Get all open PRs
            const { data: allPRs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100 // Adjust if you have more than 100 open PRs
            });

            console.log(`Found ${allPRs.length} open PRs to check`);

            for (const pr of allPRs) {
              console.log(`\n--- Checking PR #${pr.number}: ${pr.title} ---`);

              // Skip draft PRs
              if (pr.draft) {
                console.log('📝 Skipping draft PR');
                continue;
              }

              // Skip PRs with 'Theme Deploy' in title if enabled
              if (skipThemeDeploy && pr.title.includes('Theme Deploy')) {
                console.log('⏭️ Skipping Theme Deploy PR');
                continue;
              }

              const prAuthor = pr.user.login;

              // Get current labels
              const { data: labels } = await github.rest.issues.listLabelsOnIssue({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number
              });

              const alreadyNotifiedReady = labels.some(label => label.name === 'ready-for-review-notification');

              // Skip if already notified for this PR
              if (alreadyNotifiedReady) {
                console.log('⚠️ Already notified that this PR is ready for review');
                continue;
              }

              // Check if PR is already approved (skip if human already reviewed)
              const { data: reviews } = await github.rest.pulls.listReviews({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number
              });

              const humanReviews = reviews.filter(review =>
                !['codacy[bot]', 'codacy-production[bot]', 'codacy-production'].includes(review.user.login)
              );

              const hasApproval = humanReviews.some(review => review.state === 'APPROVED');
              const hasChangesRequested = humanReviews.some(review => review.state === 'CHANGES_REQUESTED');

              if (hasApproval) {
                console.log('✅ PR already has human approval, skipping');
                continue;
              }

              if (hasChangesRequested) {
                console.log('⚠️ PR has human changes requested, not ready for review');
                continue;
              }

              // Use GraphQL to fetch review threads and their resolved status
              const query = `
                query($owner: String!, $repo: String!, $prNumber: Int!) {
                  repository(owner: $owner, name: $repo) {
                    pullRequest(number: $prNumber) {
                      reviewThreads(first: 100) {
                        nodes {
                          isResolved
                          comments(first: 10) {
                            nodes {
                              author { login }
                              body
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;

              let reviewThreads = [];
              try {
                const result = await github.graphql(query, {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  prNumber: pr.number
                });
                reviewThreads = result.repository.pullRequest.reviewThreads.nodes;
              } catch (error) {
                console.log('⚠️ Failed to fetch review threads via GraphQL, assuming no unresolved Codacy comments:', error.message);
                reviewThreads = [];
              }

              // Find unresolved threads with Codacy comments
              let unresolvedCodacyComments = 0;
              let codacyComments = [];
              for (const thread of reviewThreads) {
                // Only consider unresolved threads
                if (!thread.isResolved) {
                  for (const comment of thread.comments.nodes) {
                    // Check if author exists and is a Codacy bot
                    if (comment.author && [
                      'codacy[bot]',
                      'codacy-production[bot]',
                      'codacy-production'
                    ].includes(comment.author.login)) {
                      unresolvedCodacyComments++;
                      codacyComments.push(comment);
                      break; // Only count one per thread
                    }
                  }
                }
              }
              console.log(`Found ${unresolvedCodacyComments} unresolved Codacy comments`);

              // If there are unresolved Codacy comments, PR is not ready
              if (unresolvedCodacyComments > 0) {
                console.log('⚠️ PR has unresolved Codacy comments, not ready for human review');
                continue;
              }

              // If we get here, the PR is ready for human review!
              console.log('🎉 PR appears ready for human review!');

              // Notify the specified user via GitHub comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: `🎉 @${notificationUser} This PR is ready for human review!\n\n✅ All Codacy issues appear to be resolved\n✅ No human reviewers have requested changes.\n\n🔗 ${pr.html_url}`
              });

              // Add label to prevent duplicate notifications
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: ['ready-for-review-notification']
              });

              console.log(`✅ Successfully notified that PR #${pr.number} is ready for human review`);
            }

            console.log('\n🏁 Daily PR check completed!');